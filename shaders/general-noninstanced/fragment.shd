#version 330
layout(location=0) out vec4 fragmentColor;
layout(location=1) out vec4 fragmentNorm;
layout(location=2) out vec4 fragmentPos;

in VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec2 uv;
  vec3 tangent;
  vec3 bitangent;
} VertexOut;

uniform sampler2D colormap;
uniform sampler2D normalmap;
uniform int options;

void main()
{
  vec3 normalDetail = normalize(textureLod(normalmap, VertexOut.uv, 0).xyz-0.5);
  vec3 normal       = normalize(VertexOut.normal.xyz);
  vec3 tangent      = normalize(VertexOut.tangent.xyz);
  vec3 bitangent    = normalize(VertexOut.bitangent.xyz);
  mat3 mt           = mat3(tangent, bitangent, normal);

  vec3 actualNormal;

  if (options % 2 == 1)
    actualNormal = mt * normalDetail;
  else
    actualNormal = normal;

  fragmentColor  = texture(colormap, VertexOut.uv);
  fragmentNorm   = vec4(actualNormal, 1);
  fragmentPos    = VertexOut.position;
}
