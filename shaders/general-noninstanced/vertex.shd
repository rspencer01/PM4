#version 410
in vec3 position;
in vec3 normal;
in vec4 color;
in vec2 textcoord;
in vec3 tangent;
in vec3 bitangent;

out VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
  vec2 uv;
  vec3 tangent;
  vec3 bitangent;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;
uniform mat4 shadowProjection1;
uniform mat4 shadowProjection2;
uniform mat4 shadowProjection3;
uniform mat4 shadow1View;
uniform mat4 shadow2View;
uniform mat4 shadow3View;
uniform mat4 model;

#include shaders/include/NormalOps.shd;
#include shaders/include/TerrainPagedTexture.shd;

void main()
{
  VertexOut.position = model * vec4(position,1.0);
  VertexOut.normal = transpose(inverse(model)) * vec4(normal, 1);
  VertexOut.tangent = (transpose(inverse(model)) * vec4(tangent, 1)).xyz;
  VertexOut.bitangent = (transpose(inverse(model)) * vec4(bitangent, 1)).xyz;
  VertexOut.color = color;
  VertexOut.uv = textcoord;

  // Lets not clip on the Earth's surface due to the atmospheric renderer
  VertexOut.position.y += 1e3;

  vec3 offst = getOffset(VertexOut.position.xyz);
  VertexOut.position.xyz += offst;

  vec4 temp = shadowProjection1 * shadow1View * VertexOut.position;
  VertexOut.shadowPos1 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection2 * shadow2View * VertexOut.position;
  VertexOut.shadowPos2 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection3 * shadow3View * VertexOut.position;
  VertexOut.shadowPos3 = (temp.xyz / temp.w)/2+vec3(0.5);

  gl_Position = projection * View * VertexOut.position;
}
