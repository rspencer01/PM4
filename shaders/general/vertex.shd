#version 410
in vec3 position;
in vec3 normal;
in vec4 color;
in vec2 textcoord;
in mat4 model;
in vec3 tangent;
in vec3 bitangent;

out VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec2 uv;
  vec3 tangent;
  vec3 bitangent;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;

void main()
{
  VertexOut.position = model * vec4(position,1.0);
  VertexOut.normal = transpose(inverse(model)) * vec4(normal, 1);
  VertexOut.tangent = (transpose(inverse(model)) * vec4(tangent, 1)).xyz;
  VertexOut.bitangent = (transpose(inverse(model)) * vec4(bitangent, 1)).xyz;
  VertexOut.color = color;
  VertexOut.uv = textcoord;

  gl_Position = projection * View * VertexOut.position;
}
