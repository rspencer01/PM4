#version 330
layout(location=0) out vec4 fragColor;

in VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
  vec2 uv;
  mat2 normMat;
} VertexOut;

uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform vec3 userCameraPosition;
uniform sampler2D shadowTexture1;
uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;
uniform sampler2D  colormap;
uniform sampler2D  bumpmap;

float light(vec3 normal)
{
  float diff = 0.6 * dot(sunDirection,normal.rgb);
  float ambi = 0.4;
  float shadow = 0;
  if ((VertexOut.shadowPos1.x<1.0) && 
      (VertexOut.shadowPos1.x>0) &&
      (VertexOut.shadowPos1.y<1.0) &&
      (VertexOut.shadowPos1.y>0))
  {
     if (VertexOut.shadowPos1.z-texture(shadowTexture1,VertexOut.shadowPos1.xy).z > 0.0001)
          shadow =1;
  }
  else
  {
    if ((VertexOut.shadowPos2.x<1.0) && (VertexOut.shadowPos2.x>0)&&(VertexOut.shadowPos2.y<1.0) && (VertexOut.shadowPos2.y>0))
    {
       if (VertexOut.shadowPos2.z-texture(shadowTexture2,VertexOut.shadowPos2.xy).z > 0.001)
            shadow =1;
    }
    else
    {
      if ((VertexOut.shadowPos3.x<1.0) && (VertexOut.shadowPos3.x>0)&&(VertexOut.shadowPos3.y<1.0) && (VertexOut.shadowPos3.y>0))
         if (VertexOut.shadowPos3.z-texture(shadowTexture3,VertexOut.shadowPos3.xy).z > 0.001)
              shadow =1;
    }
  }

  vec3 r = normalize(CameraPosition-VertexOut.position.xyz);
  float d = dot(sunDirection,normal.xyz);
  vec3 h = sunDirection - (d * normal.xyz);
  vec3 q = (d * normal.xyz) - h;
  float spec = pow(max(0,dot(q,r)),1000.);

  return ambi + max(0,diff)*(1-0*shadow);
}

vec3 makeFog(vec3 c)
{
  float dist = length(VertexOut.position.xyz-CameraPosition);
  float fogAmount = 1.0-exp(-max(0,dist-100) * 0.0005);
  float sunAmount = max( dot( normalize(VertexOut.position.xyz-CameraPosition) , sunDirection ), 0.0 );
  vec3  fogColor  = mix( vec3(0.5,0.6,0.7), // bluish
                         vec3(1.0,0.9,0.7), // yellowish
                         pow(sunAmount,8.0) );
  return mix(c,fogColor,fogAmount);
}

void main()
{
  if (abs(VertexOut.position.x - 100*(userCameraPosition.x/100)) < 100 && abs(VertexOut.position.z - 100*(userCameraPosition.z/100)) < 100 ) discard;
  float dist = length(VertexOut.position.xyz - userCameraPosition);
  vec4 textureColor = textureLod(colormap,vec2(VertexOut.uv.x,VertexOut.uv.y),min(dist/800,4));
  vec3 normal = textureLod(bumpmap,vec2(VertexOut.uv.x,1-VertexOut.uv.y),min(dist/800,4)).xyz;
  normal.xz = VertexOut.normMat * normal.xz;
  if (textureColor.a < 0.4) discard;
  vec3 color = makeFog(light(normal) * VertexOut.color.rgb * textureColor.rgb);
  fragColor = vec4(color ,textureColor.a);
}
