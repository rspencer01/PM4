#version 330
in vec3 position;
in vec3 normal;
in vec4 color;
in vec2 textcoord;
in mat4 model;

out VertexData
{
  vec4 position;
  vec4 normal;
  vec4 color;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
  vec2 uv;
  mat2 normMat;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;
uniform mat4 shadowProjection1;
uniform mat4 shadowProjection2;
uniform mat4 shadowProjection3;
uniform vec3 CameraPosition;
uniform vec3 userCameraPosition;
uniform sampler2D heightmap;
uniform sampler2D noise;
uniform mat4 shadow1View;
uniform mat4 shadow2View;
uniform mat4 shadow3View;

// Second derivitive of the heightmap, ie div^2(H)
float getCurvature(vec3 pos)
{
  float c = texture(heightmap,pos.xz/8000+vec2(0.5)).a;
  float d = texture(heightmap,(pos.xz+vec2(16,0))/8000+vec2(0.5)).a+
            texture(heightmap,(pos.xz+vec2(0,16))/8000+vec2(0.5)).a+
            texture(heightmap,(pos.xz+vec2(-16,0))/8000+vec2(0.5)).a+
            texture(heightmap,(pos.xz+vec2(0,-16))/8000+vec2(0.5)).a;
  d/=4;
  return abs(c-d);
}

#include shaders/include/NormalOps.shd;

float getFineAmount(vec3 pos)
{
  float theta = acos(normalize(texture(heightmap,pos.xz/60000+vec2(0.5)).xyz).y);
  if (theta<0.5)
    return 4;
  theta = (theta -0.5)/(3.1415/2 - 0.5);
  return (theta*30+4);
  return (theta*20+1) + 2*getCurvature(pos);
}

vec4 getFineValue(vec3 pos)
{
  vec4 ans1 =textureLod(noise,pos.xz/800,0);
  ans1.xz /= 800;
  ans1.xyz = normalize(ans1.xyz);
  vec4 ans2 =textureLod(noise,pos.xz/200+vec2(0.1,0.3),0);
  ans2.xz /= 200;
  ans2.xyz = normalize(ans2.xyz);
  ans2 = scaleNormal(ans2,0.1);
  vec4 ans3 =textureLod(noise,pos.xz/1200+vec2(0.1,0.3),0);
  ans3.xz /= 1200;
  ans3.xyz = normalize(ans3.xyz);
  ans3 = scaleNormal(ans3,3);
  return  addNormals(ans3,addNormals(ans1,ans2));
}

vec4 cubic(float v){
  vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
  vec4 s = n * n * n;
  float x = s.x;
  float y = s.y - 4.0 * s.x;
  float z = s.z - 4.0 * s.y + 6.0 * s.x;
  float w = 6.0 - x - y - z;
  return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){

   vec2 texSize = textureSize(sampler, 0);
   vec2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = texture(sampler, offset.xz);
    vec4 sample1 = texture(sampler, offset.yz);
    vec4 sample2 = texture(sampler, offset.xw);
    vec4 sample3 = texture(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

void main()
{
  vec3 center = (model * vec4(0,0,0,1)).xyz;
  float rotation = 3.1415+atan(CameraPosition.x-center.x,CameraPosition.z-center.z);
  VertexOut.normMat = mat2(cos(rotation),-sin(rotation),sin(rotation),cos(rotation));
  
  VertexOut.position = model * vec4(position,1.0);
  VertexOut.position -= vec4(center,0);
  VertexOut.position.xz = VertexOut.normMat * VertexOut.position.xz;
  VertexOut.position += vec4(center,0);

  vec3 normal = texture(heightmap,(VertexOut.position.xz/60000)+vec2(0.5)).zyx;
  normal = normalize(normal);
  vec3 displacement = vec3(0,1000,0) + vec3(0,1,0) * textureBicubic(heightmap,VertexOut.position.xz/60000 + vec2(0.5)).a;
  //displacement += normal * getFineAmount(VertexOut.position.xyz) * getFineValue(VertexOut.position.xyz).a;
  VertexOut.position.xyz += displacement;

  VertexOut.normal = model * vec4(normal,0);
  VertexOut.color = color;
  VertexOut.uv = textcoord;
  VertexOut.uv.x/=1;
  VertexOut.uv.x += 1-0.1 * int(rotation/(2*3.141592/1));

  vec4 temp = shadowProjection1 * shadow1View * VertexOut.position;
  VertexOut.shadowPos1 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection2 * shadow2View * VertexOut.position;
  VertexOut.shadowPos2 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection3 * shadow3View * VertexOut.position;
  VertexOut.shadowPos3 = (temp.xyz / temp.w)/2+vec3(0.5);

  gl_Position = projection * View * VertexOut.position;
}
