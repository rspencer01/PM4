#version 400
uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform sampler2D shadowTexture1; uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;
uniform sampler2D noise;
uniform sampler2D heightmap;
uniform sampler2D bumpmap;
uniform sampler2D colormap;

layout(location=0) out vec4 fragColor;
layout(location=1) out vec4 fragNorm;
layout(location=2) out vec4 fragPos;

in TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

vec4 scaleT(vec4 v,float f)
{
  return vec4(v.x,v.y/f,v.z,v.w*f);
}

float getCurvature()
{
  float c = textureLod(heightmap,TesselationOut.position.xz/8000+vec2(0.5),0).a;
  float d = textureLod(heightmap,(TesselationOut.position.xz+vec2(16,0))/8000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(0,16))/8000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(-16,0))/8000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(0,-16))/8000+vec2(0.5),0).a;
  d/=4;
  return abs(c-d);
}

float getFineAmount()
{
  float theta = acos(normalize(textureLod(heightmap,TesselationOut.position.xz/8000+vec2(0.5),0).xyz).y);
  if (theta<0.5)
    return 1+1*getCurvature();;
  theta = (theta -0.5)/(3.1415/2 - 0.5);
  return (theta*20+1) + 2*getCurvature();
}

vec3 getNormal(vec3 pos)
{
  vec3 T = normalize(textureLod(heightmap,pos.xz/8000+vec2(0.5),0).xyz);
  vec3 R = normalize(cross(vec3(1,0,0),T));
  vec3 B = normalize(cross(R,T));
  mat3 q = transpose(mat3(R,T,B));
  float amount = 1-min(length(pos-CameraPosition)/2000,1);
  amount *= getFineAmount();
  vec3 detailNormal = textureLod(noise,pos.xz/200,0).xyz;
  detailNormal.xz *=-amount;
  return  q*normalize(detailNormal);
}

vec3 colorOffset()
{
  return vec3(0.4*textureLod(noise,TesselationOut.position.xz/600,0).a,
              0.4*textureLod(noise,TesselationOut.position.zx/600+vec2(0.1,0.2),0).a,
              0.2*textureLod(noise,TesselationOut.position.zx/600+vec2(0.5,0.1),0).a
)+vec3(1);
}

vec3 color(vec3 norm)
{
  float f = 0.8;
  norm = f*normalize(norm) + (1-f)*normalize(textureLod(heightmap,TesselationOut.origPosition.xz/8000+vec2(0.5),0).xyz);
  norm = normalize(norm);
  float lod = 5.5;
  float texAmount = max(0,1-length(TesselationOut.position.xyz-CameraPosition)/100);
  vec3 texCol = textureLod(colormap,(mod(TesselationOut.position.xz/2,vec2(1)))/2,0).xyz * colorOffset();
  vec3 norCol = vec3(117,133,58)/255 * colorOffset();
  if (norm.y<0.8 + textureLod(noise,TesselationOut.position.xz/1000,0).a*0.03 + getFineAmount()*0.01)
  {
    norCol = vec3(0.5);
    texCol = textureLod(colormap,(mod(TesselationOut.position.xz/2,vec2(1)))/2+vec2(0.5,0),0).xyz;
  }
  else
  {
    if (norm.y<0.90 + textureLod(noise,TesselationOut.position.xz/1000,0).a*0.5 + getFineAmount()*0.03)
    {
      norCol = vec3(143,133,75)/255;
      texCol = textureLod(colormap,(mod(TesselationOut.position.xz/2,vec2(1)))/2+vec2(0,0.5),0).xyz;
    }
  } 
  return  texCol* texAmount  + (1-texAmount)*norCol;
}

void main()
{
  vec3 norm = getNormal(TesselationOut.origPosition.xyz);
  fragColor = vec4(
    color(norm),
    1); 
  fragNorm = vec4(norm,1);
  fragPos = TesselationOut.position;
}
