#version 400
uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform sampler2D shadowTexture1; uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;
uniform sampler2D bumpmap;
uniform sampler2D colormap;
uniform sampler2D normalmap;

layout(location=0) out vec4 fragColor;
layout(location=1) out vec4 fragNorm;
layout(location=2) out vec4 fragPos;

in TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

#include shaders/include/TextureBicubic.shd;
#include shaders/include/NormalOps.shd;
#include shaders/include/TerrainPagedTexture.shd;
#include shaders/include/grassDisplacement.shd;

vec3 averageNormal(vec3 pos)
{
  return normalize(textureBicubic(heightmap,pos.xz/60000+vec2(0.5)).zyx);
}

vec3 getNormalmap(vec3 position, vec3 type, vec3 norm, vec3 averageNorm)
{
  float f = 0.8;
  norm = f*normalize(norm) + (1-f)*normalize(averageNorm);
  norm = normalize(norm);
  if (round(type.x) == 1)
  {
    return normalize(texture(normalmap,(mod(vec2(TesselationOut.position.xz)/8,vec2(1)))/2+vec2(0.5,0.5)).xyz-0.5);
  }
  else
  {
    // Rock
    if (norm.y<0.80)
    { return vec3(0,0,1);}
    else
    {
      // Snow
      if (position.y>2300 + 300 * textureBicubic(noise,vec2(position.xz/5000)).a)
      {
        return vec3(0,0,1);
      }
      else
      // Dryer grass
      if (norm.y<0.93 - 0.1 * textureBicubic(noise,vec2(position.xz/5000)+vec2(0.1,0.2)).a ||
          getGroundDryness(position.xz)<-0.6)
      {
        return normalize(texture(normalmap,(mod(vec2(TesselationOut.position.xz)/2,vec2(1)))/2+vec2(0,0.5)).xyz-0.5);
      }
    }
  }
  return get_normal_from_height(position.xz).rbg;
  return normalize(texture(normalmap,(mod(vec2(TesselationOut.position.xz)/4,vec2(1)))/2+vec2(0,0)).xyz-0.5);
}

vec3 color(vec3 norm,vec3 pos,vec3 averageNorm, vec3 type)
{
  float f = 0.8;
  norm = f*normalize(norm) + (1-f)*normalize(averageNorm);
  norm = normalize(norm);
  float texAmount = max(0,1-length(vec3(TesselationOut.position.xyz)-CameraPosition)/1500);
  vec3 texCol = vec3(1.5,1.3,1.2)*textureLod(colormap,(mod(vec2(TesselationOut.position.xz)*2,vec2(1)))/2,0).xyz * colorOffset(TesselationOut.position.xz);
  vec3 norCol = vec3(120,137,48)/255 * colorOffset(TesselationOut.position.xz);

  if (round(type.x) == 1)
  {
      norCol = vec3(0.53,0.48,0.39);
      texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/8,vec2(1)))/2+vec2(0.5,0.5),0).xyz;
  }
  else
  {
    // Rock
    if (norm.y<0.80)
    {
      norCol = vec3(0.5);
      texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/10,vec2(1)))/2+vec2(0.5,0),0).xyz;
    }
    else
    {
      // Snow
      if (pos.y>2300 + 300 * textureBicubic(noise,vec2(pos.xz/5000)).a)
      {
        norCol = vec3(.9);
        texCol = norCol;//textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/2,vec2(1)))/2+vec2(0.5,0),0).xyz;
      }
      else
      // Dryer grass
      if (norm.y<0.93 - 0.1 * textureBicubic(noise,vec2(pos.xz/5000)+vec2(0.1,0.2)).a ||
          getGroundDryness(pos.xz)<-0.6)
      {
        norCol = vec3(133,133,75)/255;
        texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/2,vec2(1)))/2+vec2(0,0.5),0).xyz;
      }
    }
  }
  return  texCol* texAmount  + (1-texAmount)*norCol;
}

void main()
{
  vec3 averageNorm = averageNormal(TesselationOut.origPosition.xyz);
  vec3 norm        = getPagedNormal(TesselationOut.origPosition.xyz);
  vec3 type        = getPagedType(TesselationOut.origPosition.xyz);
  fragColor = vec4(
    color(norm,TesselationOut.position.xyz,averageNorm, type),
    1);
  vec3 tangent   = normalize(cross(vec3(0,0,1), norm));
  vec3 bitangent = normalize(cross(norm,tangent));
  tangent        = normalize(cross(bitangent, norm));
  mat3 mt        = mat3(tangent, bitangent, norm);
  vec3 normalDetail = getNormalmap(TesselationOut.position.xyz, type,norm, averageNorm);

  vec3 actualNormal = mt * normalDetail;

  fragNorm       = vec4(actualNormal, 1);
  fragPos        = vec4(TesselationOut.position);
}
