#version 400
uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform sampler2D shadowTexture1; uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;
uniform sampler2D noise;
uniform sampler2D heightmap;
uniform sampler2D bumpmap;
uniform sampler2D colormap;
uniform sampler2D foliageMap;

layout(location=0) out vec4 fragColor;
layout(location=1) out vec4 fragNorm;
layout(location=2) out vec4 fragPos;

in TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

vec4 cubic(float v){
  vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
  vec4 s = n * n * n;
  float x = s.x;
  float y = s.y - 4.0 * s.x;
  float z = s.z - 4.0 * s.y + 6.0 * s.x;
  float w = 6.0 - x - y - z;
  return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){
   vec2 texSize = textureSize(sampler, 0);
   vec2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = texture(sampler, offset.xz);
    vec4 sample1 = texture(sampler, offset.yz);
    vec4 sample2 = texture(sampler, offset.xw);
    vec4 sample3 = texture(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}
// Second derivitive of the heightmap, ie div^2(H)
float getCurvature()
{
  float c = textureLod(heightmap,TesselationOut.position.xz/60000+vec2(0.5),0).a;
  float d = textureLod(heightmap,(TesselationOut.position.xz+vec2(10,0))/60000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(0,10))/60000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(-10,0))/60000+vec2(0.5),0).a+
            textureLod(heightmap,(TesselationOut.position.xz+vec2(0,-10))/60000+vec2(0.5),0).a;
  d/=4;
  return abs(c-d);
}

vec4 addNormals(vec4 a, vec4 b)
{
  a.xyz /= a.y;
  b.xyz /= b.y;
  vec4 ans;
  ans.a = a.a + b.a;
  ans.y = 1;
  ans.x = a.x + b.x;
  ans.z = a.z + b.z;
  ans.xyz = normalize(ans.xyz);
  return ans;
}

vec4 scaleNormal(vec4 a, float s)
{
  a.y /= s;
  a.w *= s;
  a.xyz = normalize(a.xyz);
  return a;
}

float getFineAmount(vec3 pos)
{
  float theta = acos(normalize(texture(heightmap,pos.xz/60000+vec2(0.5)).xyz).y);
  if (theta<0.4)
    return 30;
  return 30+(theta-0.4)*100 + 10*(theta-0.4)*getCurvature();
}

vec4 getFineValue(vec3 pos)
{
  vec4 ans1 =textureBicubic(noise,pos.xz/1200);
  ans1.xz/=1200;
  ans1.xzw*=getFineAmount(pos);
  return ans1;
}

vec3 averageNormal(vec3 pos, vec3 newPos)
{
  return normalize(textureBicubic(heightmap,pos.xz/60000+vec2(0.5)).zyx);
}

vec3 getNormal(vec3 pos, vec3 newPos)
{
  vec3 n = averageNormal(pos,newPos);
  vec3 t = cross(vec3(1,0,0),n);
  vec3 b = cross(t,n);
  vec4 displacement = getFineValue(pos);
  mat3 J = mat3(
      1,displacement.x,0,
      0,1,0,
      0,displacement.z,1
      );
  t = J*t;
  b = J*b;
  return normalize(cross(b,t));

/*  vec3 T = averageNormal(pos,newPos);
  vec3 R = normalize(cross(vec3(0,0,1),T));
  vec3 B = normalize(cross(R,T));
  mat3 q = transpose(mat3(R,T,B));
  float amount = 1;//-max(0,min(1,length(newPos-CameraPosition)/10000));
  amount *= getFineAmount();
  vec3 detailNormal = getFineValue(pos).xyz;
//  detailNormal.xz *= -amount;
  return  q*(detailNormal);*/
}

vec3 colorOffset()
{
  return vec3(1)+vec3(0.2*textureLod(noise,TesselationOut.position.xz/10000,0).a,
              0.2*textureLod(noise,TesselationOut.position.zx/4000+vec2(0.1,0.2),0).a,
              0.2*textureLod(noise,TesselationOut.position.zx/4000+vec2(0.5,0.1),0).a);
//)+vec3(1.0);
}

vec3 color(vec3 norm,vec3 pos,vec3 averageNorm)
{
  float f = 0.7;
  norm = f*normalize(norm) + (1-f)*normalize(averageNorm);
  norm = normalize(norm);
  float texAmount = max(0,1-length(vec3(TesselationOut.position.xyz)-CameraPosition)/2600);
  vec3 texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2,0).xyz * colorOffset();
  vec3 norCol = vec3(100,117,48)/255 * colorOffset();
  //float foliageAmount = textureLod(foliageMap,TesselationOut.position.zx/60000+vec2(0.5),0).x;
  //float foliageMultiplyer = clamp(length(vec3(TesselationOut.position.xyz)-CameraPosition)/1000-1,0,1); 
  //norCol = norCol * (1-foliageMultiplyer * foliageAmount) + foliageMultiplyer * foliageAmount * vec3(10,32,10)/255;
  // Rock
  if (norm.y<0.80)
  {
    norCol = vec3(0.5);
    texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2+vec2(0.5,0),0).xyz;
  }
  else
  {
    // Snow
    if (pos.y>2300 + 300 * textureBicubic(noise,vec2(pos.xz/5000)).a)
    {
      norCol = vec3(.9);
      texCol = norCol;//textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/2,vec2(1)))/2+vec2(0.5,0),0).xyz;
    }
    else
    // Dryer grass
    if (norm.y<0.93 - 0.1 * textureBicubic(noise,vec2(pos.xz/5000)+vec2(0.1,0.2)).a)
    {
      norCol = vec3(133,133,75)/255;
      texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2+vec2(0,0.5),0).xyz;
    }
  }
  return  texCol* texAmount  + (1-texAmount)*norCol;
}

void main()
{
  vec3 averageNorm = averageNormal(TesselationOut.origPosition.xyz,TesselationOut.position.xyz);
  vec3 norm = getNormal(TesselationOut.origPosition.xyz,TesselationOut.position.xyz);
  fragColor = vec4(
    color(norm,TesselationOut.position.xyz,averageNorm),
    1);
  fragNorm = vec4(norm,1);
  fragPos = vec4(TesselationOut.position);
}
