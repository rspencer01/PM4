#version 400
uniform vec3 sunDirection;
uniform vec3 CameraPosition;
uniform sampler2D shadowTexture1; uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;
uniform sampler2D noise;
uniform sampler2D bumpmap;
uniform sampler2D colormap;
uniform sampler2D foliageMap;

layout(location=0) out vec4 fragColor;
layout(location=1) out vec4 fragNorm;
layout(location=2) out vec4 fragPos;

in TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

#include shaders/include/TextureBicubic.shd;
#include shaders/include/TerrainOps.shd;
#include shaders/include/NormalOps.shd;

vec3 averageNormal(vec3 pos)
{
  return normalize(textureBicubic(heightmap,pos.xz/60000+vec2(0.5)).zyx);
}

vec3 getNormal(vec3 pos, vec3 newPos)
{
  vec3 n = averageNormal(pos);
  if (length(newPos-CameraPosition) > 4e3)
    return normalize(n + textureLod(noise,TesselationOut.position.zx/10000,0).rgb*0.015);
  vec3 t = cross(vec3(1,0,0),n);
  vec3 b = cross(t,n);
  vec4 displacement = getFineValue(pos.xz+vec2(30000));
  mat3 J = mat3(
      1,displacement.x,0,
      0,1,0,
      0,displacement.z,1
      );
  t = J*t;
  b = J*b;
  return normalize(cross(b,t));
}

vec3 colorOffset()
{
  return vec3(1)+0.01*textureLod(noise,TesselationOut.position.xz/20000,0).rgb;
}

vec3 color(vec3 norm,vec3 pos,vec3 averageNorm)
{
  float f = 0.8;
  norm = f*normalize(norm) + (1-f)*normalize(averageNorm);
  norm = normalize(norm);
  float texAmount = max(0,1-length(vec3(TesselationOut.position.xyz)-CameraPosition)/1500);
  vec3 texCol = texture(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2).xyz * colorOffset();
  vec3 norCol = vec3(100,117,48)/255 * colorOffset();
  // Rock
  if (norm.y<0.80)
  {
    norCol = vec3(0.5);
    texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2+vec2(0.5,0),0).xyz;
  }
  else
  {
    // Snow
    if (pos.y>2300 + 300 * textureBicubic(noise,vec2(pos.xz/5000)).a)
    {
      norCol = vec3(.9);
      texCol = norCol;//textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/2,vec2(1)))/2+vec2(0.5,0),0).xyz;
    }
    else
    // Dryer grass
    if (norm.y<0.93 - 0.1 * textureBicubic(noise,vec2(pos.xz/5000)+vec2(0.1,0.2)).a)
    {
      norCol = vec3(133,133,75)/255;
      texCol = textureLod(colormap,(mod(vec2(TesselationOut.position.xz)/16,vec2(1)))/2+vec2(0,0.5),0).xyz;
    }
  }
  return  texCol* texAmount  + (1-texAmount)*norCol;
}

void main()
{
  vec3 averageNorm = averageNormal(TesselationOut.origPosition.xyz);
  vec3 norm        = getNormal(TesselationOut.origPosition.xyz, TesselationOut.position.xyz);
  fragColor = vec4(
    color(norm,TesselationOut.position.xyz,averageNorm),
    1);
  fragNorm = vec4(norm,1);
  fragPos = vec4(TesselationOut.position);
}
