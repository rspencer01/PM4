#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 View;
uniform mat4 projection;
uniform mat4 shadowProjection1;
uniform mat4 shadowProjection2;
uniform mat4 shadowProjection3;
uniform mat4 shadow1View;
uniform mat4 shadow2View;
uniform mat4 shadow3View;
uniform sampler2D heightmap;
uniform sampler2D noise;

in vec3 evaluationpoint_wor[];

float Re = 6.360e6;

out TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

// Second derivitive of the heightmap, ie div^2(H)
float getCurvature()
{
  float c = texture(heightmap,TesselationOut.position.xz/60000+vec2(0.5)).a;
  float d = texture(heightmap,(TesselationOut.position.xz+vec2(10,0))/60000+vec2(0.5)).a+
            texture(heightmap,(TesselationOut.position.xz+vec2(0,10))/60000+vec2(0.5)).a+
            texture(heightmap,(TesselationOut.position.xz+vec2(-10,0))/60000+vec2(0.5)).a+
            texture(heightmap,(TesselationOut.position.xz+vec2(0,-10))/60000+vec2(0.5)).a;
  d/=4;
  return abs(c-d);
}

vec4 addNormals(vec4 a, vec4 b)
{
  a.xyz /= a.y;
  b.xyz /= b.y;
  vec4 ans;
  ans.a = a.a + b.a;
  ans.y = 1;
  ans.x = a.x + b.x;
  ans.z = a.z + b.z;
  ans.xyz = normalize(ans.xyz);
  return ans;
}

vec4 scaleNormal(vec4 a, float s)
{
  a.y /= s;
  a.w *= s;
  a.xyz = normalize(a.xyz);
  return a;
}


vec4 cubic(float v){
  vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
  vec4 s = n * n * n;
  float x = s.x;
  float y = s.y - 4.0 * s.x;
  float z = s.z - 4.0 * s.y + 6.0 * s.x;
  float w = 6.0 - x - y - z;
  return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){

   vec2 texSize = textureSize(sampler, 0); vec2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = texture(sampler, offset.xz);
    vec4 sample1 = texture(sampler, offset.yz);
    vec4 sample2 = texture(sampler, offset.xw);
    vec4 sample3 = texture(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

float getFineAmount(vec3 pos)
{
  float theta = acos(normalize(texture(heightmap,pos.xz/60000+vec2(0.5)).xyz).y);
  if (theta<0.4)
    return 30;
  return 30+(theta-0.4)*100 + 10*(theta-0.4)*getCurvature();
}

vec4 getFineValue(vec3 pos)
{
  vec4 ans1 =textureBicubic(noise,pos.xz/1200);
  ans1.xz/=1200;
  ans1.xzw*=getFineAmount(pos);
  return ans1;
}

void main()
{
  vec3 p0 = gl_TessCoord.x * evaluationpoint_wor[0];
  vec3 p1 = gl_TessCoord.y * evaluationpoint_wor[1];
  vec3 p2 = gl_TessCoord.z * evaluationpoint_wor[2];
  TesselationOut.position = vec4(p0+p1+p2,1);
  TesselationOut.origPosition = TesselationOut.position;

  // Lets not clip on the Earth's surface due to the atmospheric renderer
  TesselationOut.position.y += 1e3;

  // The basic heightmap
  vec3 displacement = vec3(0,1,0) * textureBicubic(heightmap,TesselationOut.position.xz/60000 + vec2(0.5)).a;

  vec3 normal = textureBicubic(heightmap,(TesselationOut.position.xz/60000)+vec2(0.5)).zyx;
  normal = normalize(normal);

  displacement += normal* getFineValue(TesselationOut.position.xyz).a;

  TesselationOut.position.xyz += displacement;

  vec4 temp = shadowProjection1 * shadow1View * TesselationOut.position;
  TesselationOut.shadowPos1 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection2 * shadow2View * TesselationOut.position;
  TesselationOut.shadowPos2 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection3 * shadow3View * TesselationOut.position;
  TesselationOut.shadowPos3 = (temp.xyz / temp.w)/2+vec3(0.5);

  gl_Position = projection * View * TesselationOut.position;
}
