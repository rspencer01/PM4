#version 410 core

layout(triangles, equal_spacing, ccw) in;

uniform mat4 View;
uniform mat4 projection;
uniform mat4 shadowProjection1;
uniform mat4 shadowProjection2;
uniform mat4 shadowProjection3;
uniform mat4 shadow1View;
uniform mat4 shadow2View;
uniform mat4 shadow3View;

in vec3 evaluationpoint_wor[];

float Re = 6.360e6;

out TesselationData
{
  vec4 position;
  vec4 origPosition;
  vec3 shadowPos1;
  vec3 shadowPos2;
  vec3 shadowPos3;
} TesselationOut;

#include shaders/include/TerrainPagedTexture.shd;

void main()
{
  vec3 p0 = gl_TessCoord.x * evaluationpoint_wor[0];
  vec3 p1 = gl_TessCoord.y * evaluationpoint_wor[1];
  vec3 p2 = gl_TessCoord.z * evaluationpoint_wor[2];
  TesselationOut.position = vec4(p0+p1+p2,1);
  TesselationOut.origPosition = TesselationOut.position;

  // Lets not clip on the Earth's surface due to the atmospheric renderer
  TesselationOut.position.y += 1e3;

  vec3 offst = getOffset(TesselationOut.origPosition.xyz);
  TesselationOut.position.xyz += offst;

  vec4 temp = shadowProjection1 * shadow1View * TesselationOut.position;
  TesselationOut.shadowPos1 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection2 * shadow2View * TesselationOut.position;
  TesselationOut.shadowPos2 = (temp.xyz / temp.w)/2+vec3(0.5);
  temp = shadowProjection3 * shadow3View * TesselationOut.position;
  TesselationOut.shadowPos3 = (temp.xyz / temp.w)/2+vec3(0.5);

  gl_Position = projection * View * TesselationOut.position;
}
