#version 410
in vec3 position;
in vec3 occlusion;

out VertexData
{
  vec4 position;
  vec3 up;
  vec3 north;
  vec2 type;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;
uniform vec3 userCameraPosition;
uniform float patchSize;

#include shaders/include/TextureBicubic.shd;
#include shaders/include/NormalOps.shd;
#include shaders/include/TerrainPagedTexture.shd;

void main()
{
  VertexOut.position = vec4(position,1.0);

  VertexOut.position.xz += floor(userCameraPosition.xz/patchSize)*patchSize;
  VertexOut.position.x += texture2D(noise,cos(VertexOut.position.xz)*0.300+vec2(.5)).a*3;
  VertexOut.position.z += texture2D(noise,cos(VertexOut.position.xz+vec2(.1,.3))*0.400+vec2(.5)).a*3;
  VertexOut.position.y += 1e3;

  VertexOut.type=vec2(.5,.5);
  if (texture2D(noise,cos(VertexOut.position.xz)*0.300+vec2(.5)).a > .3)
    VertexOut.type=vec2(.5,0.);

  vec3 offst = getOffset(VertexOut.position.xyz);
  VertexOut.position.xyz += offst;

  vec3 normal = textureBicubic(heightmap,(VertexOut.position.xz/60000)+vec2(0.5)).zyx;
  normal = normalize(normal);

  VertexOut.up= normal;
  VertexOut.north = normalize(cross(vec3(texture2D(noise,VertexOut.position.xz).a,
                         0,
                         texture2D(noise,VertexOut.position.yz).a),VertexOut.up));

  VertexOut.position.xyz -= normal * occlusion.r * 0.3;

  gl_Position = projection * View * VertexOut.position;
}
