#version 330
in vec3 position;

out VertexData
{
  vec4 position;
  vec3 up;
  vec3 north;
  vec2 type;
} VertexOut;

uniform mat4 View;
uniform mat4 projection;
uniform vec3 CameraPosition;
uniform vec3 userCameraPosition;
uniform float patchSize;
uniform sampler2D heightmap;
uniform sampler2D noise;

// Second derivitive of the heightmap, ie div^2(H)
float getCurvature()
{ float c = texture(heightmap,VertexOut.position.xz/60000+vec2(0.5)).a;
  float d = texture(heightmap,(VertexOut.position.xz+vec2(30,0))/60000+vec2(0.5)).a+
            texture(heightmap,(VertexOut.position.xz+vec2(0,30))/60000+vec2(0.5)).a+
            texture(heightmap,(VertexOut.position.xz+vec2(-30,0))/60000+vec2(0.5)).a+
            texture(heightmap,(VertexOut.position.xz+vec2(0,-30))/60000+vec2(0.5)).a;
  d/=4;
  return abs(c-d);
}

vec4 addNormals(vec4 a, vec4 b)
{
  a.xyz /= a.y;
  b.xyz /= b.y;
  vec4 ans;
  ans.a = a.a + b.a;
  ans.y = 1;
  ans.x = a.x + b.x;
  ans.z = a.z + b.z;
  ans.xyz = normalize(ans.xyz);
  return ans;
}

vec4 scaleNormal(vec4 a, float s)
{
  a.y /= s;
  a.w *= s;
  a.xyz = normalize(a.xyz);
  return a;
}


vec4 cubic(float v){
  vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;
  vec4 s = n * n * n;
  float x = s.x;
  float y = s.y - 4.0 * s.x;
  float z = s.z - 4.0 * s.y + 6.0 * s.x;
  float w = 6.0 - x - y - z;
  return vec4(x, y, z, w) * (1.0/6.0);
}

vec4 textureBicubic(sampler2D sampler, vec2 texCoords){

   vec2 texSize = textureSize(sampler, 0); vec2 invTexSize = 1.0 / texSize;

   texCoords = texCoords * texSize - 0.5;


    vec2 fxy = fract(texCoords);
    texCoords -= fxy;

    vec4 xcubic = cubic(fxy.x);
    vec4 ycubic = cubic(fxy.y);

    vec4 c = texCoords.xxyy + vec2(-0.5, +1.5).xyxy;

    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);
    vec4 offset = c + vec4(xcubic.yw, ycubic.yw) / s;

    offset *= invTexSize.xxyy;

    vec4 sample0 = texture(sampler, offset.xz);
    vec4 sample1 = texture(sampler, offset.yz);
    vec4 sample2 = texture(sampler, offset.xw);
    vec4 sample3 = texture(sampler, offset.yw);

    float sx = s.x / (s.x + s.y);
    float sy = s.z / (s.z + s.w);

    return mix(
       mix(sample3, sample2, sx), mix(sample1, sample0, sx)
    , sy);
}

float getFineAmount()
{
  float theta = acos(normalize(texture(heightmap,VertexOut.position.xz/60000+vec2(0.5)).xyz).y);
  if (theta<0.3)
    return 4;
  theta = (theta -0.5)/(3.1415/2 - 0.5);
  return (theta*30+5) + 2*getCurvature();
}

vec4 getFineValue(vec3 pos)
{
  vec4 ans1 =textureLod(noise,pos.xz/800,0);
  ans1.xz /= 800;
  ans1.xyz = normalize(ans1.xyz);
  vec4 ans2 =textureLod(noise,pos.xz/200+vec2(0.1,0.3),0);
  ans2.xz /= 200;
  ans2.xyz = normalize(ans2.xyz);
  ans2 = scaleNormal(ans2,0.1);
  vec4 ans3 =textureLod(noise,pos.xz/1200+vec2(0.1,0.3),0);
  ans3.xz /= 1200;
  ans3.xyz = normalize(ans3.xyz);
  ans3 = scaleNormal(ans3,3);
  return  addNormals(ans3,addNormals(ans1,ans2));
}


void main()
{
  VertexOut.position = vec4(position,1.0);

  VertexOut.position.xz += floor(userCameraPosition.xz/patchSize)*patchSize;
  VertexOut.position.x += texture2D(noise,cos(VertexOut.position.xz)*0.300+vec2(.5)).a*3;
  VertexOut.position.z += texture2D(noise,cos(VertexOut.position.xz+vec2(.1,.3))*0.400+vec2(.5)).a*3;
  VertexOut.position.y += 1e3;

  VertexOut.type=vec2(.5,.5);
  if (texture2D(noise,cos(VertexOut.position.xz)*0.300+vec2(.5)).a > .3)
    VertexOut.type=vec2(.5,0.);


  vec3 displacement = vec3(0,1,0) * textureBicubic(heightmap,VertexOut.position.xz/60000 + vec2(0.5)).a;

  vec3 normal = textureBicubic(heightmap,(VertexOut.position.xz/60000)+vec2(0.5)).zyx;
  normal = normalize(normal);

  displacement += normal * getFineAmount() * getFineValue(VertexOut.position.xyz).a;

  VertexOut.position.xyz += displacement;
  VertexOut.position.y += 0;

  VertexOut.up= normal;
  VertexOut.north = normalize(cross(vec3(texture2D(noise,VertexOut.position.xz).a,
                         0,
                         texture2D(noise,VertexOut.position.yz).a),VertexOut.up));

  gl_Position = projection * View * VertexOut.position;
  gl_PointSize = 5.;
}
