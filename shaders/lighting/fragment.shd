#version 400
in vec2 pos;
out vec4 fragColor;
uniform vec3 sunDirection;

uniform mat4 shadowProjection1;
uniform mat4 shadowProjection2;
uniform mat4 shadowProjection3;
uniform mat4 shadow1View;
uniform mat4 shadow2View;
uniform mat4 shadow3View;

uniform sampler2D colormap;
uniform sampler2D depthmap;
uniform sampler2D normmap;
uniform sampler2D posmap;

uniform sampler2D shadowTexture1;
uniform sampler2D shadowTexture2;
uniform sampler2D shadowTexture3;

uniform float ambientLight;
uniform int options;
uniform int whitewash;

uniform int numLights;
uniform vec3 lightPositions[100];
uniform vec3 lightColours[100];
uniform sampler2D opticaldepthmap;

uniform float Re = 6.30e6;
uniform float Ra = 6.40e6;

#include shaders/include/SphereOps.shd;

float getShadowAmount(mat4 shadowProjection, mat4 shadowView, vec4 position, sampler2D shadowTexture)
{
  float shadowAmount = 0;
  vec4 temp = shadowProjection * shadowView * position;
  vec3 shadowPos = (temp.xyz/temp.w)/2+vec3(0.5);
  if ((shadowPos.x < 1.0) &&
      (shadowPos.x > 0.0) &&
      (shadowPos.y < 1.0) &&
      (shadowPos.y > 0.0) &&
      (shadowPos.z < 1.0) &&
      (shadowPos.z > -1.0))
  {
    for (int i = 0; i<5; i+=1)
    {
      for (int j = -3; j<4; j+=1)
      {
        if (shadowPos.z-textureLod(shadowTexture,shadowPos.xy + pow(i/3.0,0.5)*vec2(cos(j*3.141592/3),sin(j*3.141592/3))*0.001,0).x > 0.004)
          shadowAmount += 1.0/28;
      }
    }
  }
  return shadowAmount;
}

vec3 secondary_integration(vec3 position)
{
  vec2 p = vec2((length(position+vec3(0,Re,0))-Re)/(Ra-Re),
                dot(normalize(position+vec3(0,Re,0)), sunDirection)
                );
  p.y += 0.25;
  p.y /= 1.25;
  if (p.y < 0)
    return vec3(100);
  vec3 optical_depth = textureLod(opticaldepthmap, p, 0).rgb;
  return optical_depth;
}

vec3 lighting(vec4 normal, vec4 position)
{
  vec3 ans;

  float diffuse = max(0, dot(normal.xyz, sunDirection));
  float shadowAmount = 0;
  float sunLight = 1;//max(0,pow(sunDirection.y,0.7));
  if (intersects(position.xyz+vec3(0,Re,0),sunDirection,Re+1500) &&
      smallestIntersectionDistance(position.xyz+vec3(0,Re,0),sunDirection,Re+1500) > 0
      )
  {
    shadowAmount = 1;
  }
  else
  {
    shadowAmount += getShadowAmount(shadowProjection1, shadow1View, position, shadowTexture1);
    if (shadowAmount < 0.001)
    {
      shadowAmount += getShadowAmount(shadowProjection2, shadow2View, position, shadowTexture2);
      if (shadowAmount < 0.001)
      {
        shadowAmount += getShadowAmount(shadowProjection3, shadow3View, position, shadowTexture3);
      }
    }
  }
  ans = vec3(clamp(ambientLight*sunLight,0.006,1.0) + sunLight * diffuse * (1-shadowAmount*0.8));

  ans *= mix(vec3(1), exp(-secondary_integration(position.xyz)), vec3(0.5));

  for (int i = 0; i< numLights; ++i)
  {
    vec3 intensity = lightColours[i] / pow(length(position.xyz - lightPositions[i]),2);
    ans += intensity * clamp(dot(normal.xyz,normalize(lightPositions[i] - position.xyz)),0,1);
  }
  return ans;
}

void main()
{
  vec3 inputColor = texture(colormap,pos).rgb;
  if (whitewash == 1)
    inputColor = vec3(1);
  vec4 inputPos   = texture(posmap,pos);
  vec4 inputNorm  = vec4(normalize(texture(normmap,pos).rgb),1);
  gl_FragDepth    = texture(depthmap,pos).r;

  fragColor = vec4(lighting(inputNorm,inputPos) * inputColor,1);

  if ((options & 0x01) == 1)
    fragColor = vec4(inputNorm.rgb/2+vec3(0.5),1);
  if ((options & 0x02) == 2)
    fragColor = vec4(inputColor,1);

}
