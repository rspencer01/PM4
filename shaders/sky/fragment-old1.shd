#version 140
in vec4 pos;
uniform mat4 view;
uniform vec3 CameraPosition;
uniform vec3 sunDirection;
vec3 sunIntensity = vec3(20);
vec3 beta = vec3(5.8e-6,13.5e-6,33.1e-6);
float Re = 6360e3;
float Ra = 6420e3;

vec3 calcTRal(vec3 Pa, vec3 Pb)
{
  float s = 0;
  int numInt = 10;
  float ds = length(Pb-Pa)/numInt;
  float H = 8e3;
  for (int i = 0;i<numInt;i++)
  {
    vec3 P = Pa + (Pb-Pa)/numInt*(i+1);
    float h = length(P) - Re;
    s += exp(-h/H)*ds;
  }
  return exp(-beta * s);
}

vec3 calcL(vec3 P)
{
  float height = length(P);
  float theta = atan(sunDirection.y,length(sunDirection.xz));
  float r = -height*sin(theta) + sqrt(height*height*(sin(theta)*sin(theta)-1)+Ra*Ra);
  vec3 Ps = P + r * sunDirection; 
  float H = 8e3;
  return sunIntensity * calcTRal(P,Ps) * beta * exp(-(height-Re)/H);
}

void main()
{
  vec3 direction = normalize(pos.xyz);
  if (direction.y<0)
  { 
    gl_FragColor = vec4(0,0,0,1);
    return;
  }
  if (dot(direction,sunDirection)>0.9995)
  {
    gl_FragColor = vec4(1);
    return;
  }
  float theta = atan(direction.y,length(direction.xz));
  float height = Re+CameraPosition.y;
  float r = -height*sin(theta) + sqrt(height*height*(sin(theta)*sin(theta)-1)+Ra*Ra);
  vec3 Pc = vec3(0,height,0); 
  vec3 Pa = Pc + direction * r; 

  vec3 color = vec3(0);
  int numInt = 10;
  float ds = r/numInt;
  float phaseR = 3.0/(16*3.141592)*(1+dot(sunDirection,direction)*dot(sunDirection,direction));
  for (int i = 0;i<numInt;i++)
  {
    vec3 P = Pc + (Pa-Pc)/numInt*(i+1);

    color += calcTRal(Pc,P) * calcL(P) * phaseR * ds;
  }

  gl_FragColor = vec4(color,1);
}
