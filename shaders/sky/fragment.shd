#version 410
in vec2 pos;

layout(location=0) out vec4 fragColor;
layout(location=1) out vec4 fragNorm;

uniform mat4 View;
uniform vec3 CameraPosition;
uniform vec3 CameraDirection;
uniform vec3 sunDirection;
uniform float aspectRatio;
uniform float projectionFar;
uniform float projectionNear;
uniform sampler2D depthmap;
uniform sampler2D colormap;
uniform int heavy = 0;
uniform mat4 shadowProjection3;
uniform mat4 shadow3View;
uniform sampler2D shadowTexture3;
uniform sampler2D opticaldepthmap;

uniform int integrationSteps;

float rayleighextinctioncoeff = 1.4;
float mieextinctioncoeff = 1.;
float g= 0.6;

float PI = 3.1415;
float INF = 1e20;

uniform float Re = 6.3e6;
uniform float Ra = 6.4e6;

uniform vec3 RayleighSct = vec3(5.8, 13.5, 33.1) * 0.000001;
uniform vec3 MieSct = vec3(1.0, 1.0, 1.0) * 0.00002f;

uniform vec3 FogSct = vec3(1) * 0.0004*0;

uniform vec3 spherePos = vec3(1000,600,3000);

#include shaders/include/SphereOps.shd;

vec3 getShadowPos(vec3 P)
{
  vec4 pp = vec4(P,1);
  vec4 temp = shadowProjection3 * shadow3View * pp;
  return (temp.xyz / temp.w)/2 + 0.5;
}
bool inShadow(vec3 P)
{
  vec3 shadowPos = getShadowPos(P);
  if ((shadowPos.x < 1.0) &&
      (shadowPos.x > 0.0) &&
      (shadowPos.y < 1.0) &&
      (shadowPos.y > 0.0) &&
      (shadowPos.z < 1.0) &&
      (shadowPos.z > -1.0))
  {
    if (shadowPos.z-textureLod(shadowTexture3,shadowPos.xy,0).x > 0.001)
      return true;
  }
  return false;
}

vec2 phase_function(float mu)
{
  float mu2 = mu*mu;
  float g2 = g*g;
  return vec2(3/(16*PI) * (1+mu2),
              3/(8*PI)*(1+mu2)*(1-g2)/(2+g2)/pow(1+g2-2*g*mu,1.5)) * (4*PI);
}

vec3 density_function(vec3 P)
{
  return exp(-vec3(length(P+vec3(0,Re,0))-Re) / vec3(8e3, 1.2e3, 6));
}

vec3 outscatter(vec3 P)
{
  vec3 density = density_function(P);
  return RayleighSct * density.r * rayleighextinctioncoeff +
         MieSct      * density.g * mieextinctioncoeff;
}

vec3 inscatter_amount(vec3 P, vec3 direction, float mu)
{
  vec2 phase = phase_function(mu);
  vec3 density = density_function(P);
  return
    RayleighSct * density.x * phase.x+
    MieSct * density.y * phase.y;
}

vec3 secondary_integration(vec3 position)
{
  vec2 p = vec2((length(position+vec3(0,Re,0))-Re)/(Ra-Re),
                dot(normalize(position+vec3(0,Re,0)), sunDirection)
                );
  p.y += 0.25;
  p.y /= 1.25;
  if (p.y < 0)
    return vec3(100);
  vec3 optical_depth = textureLod(opticaldepthmap, p, 0).rgb;
  return optical_depth;
}

vec3 primary_integration(vec3 position, vec3 direction, float max_ray_length, vec3 backgroundColor)
{
  float primary_ray_length = 0;
  if (direction.y < 0)
    primary_ray_length = -position.y / direction.y + 1;
  else
    primary_ray_length = largestIntersectionDistance(vec3(position)+vec3(0,Re,0), vec3(direction), Ra);
  if (intersects(vec3(position)+vec3(0,Re,0), direction, Re))
    if (largestIntersectionDistance(vec3(position)+vec3(0,Re,0), direction, Re) > 0)
      primary_ray_length = min(primary_ray_length,largestIntersectionDistance(vec3(position)+vec3(0,Re,0), direction, Re));

  primary_ray_length = min(primary_ray_length, max_ray_length);
  primary_ray_length = min(primary_ray_length, 120e3);

  float ds = primary_ray_length / integrationSteps;
  vec3 P = position;
  vec3 optical_depth = vec3(0);
  vec3 inscatter = vec3(0);

  for (int i = 0; i<integrationSteps; ++i)
  {
    optical_depth += outscatter(P) * float(ds);
    if (inShadow(vec3(P)) == false)
      inscatter += inscatter_amount(P, vec3(direction), dot(vec3(direction),sunDirection)) * exp(-optical_depth - secondary_integration(vec3(P))) * ds;
    P += ds * direction;
  }
  if (primary_ray_length> 65e3)
    if (dot(direction, sunDirection) > 0.999)
      return exp(-optical_depth) + inscatter;
  return exp(-optical_depth)*backgroundColor + inscatter;
}

void main()
{
  vec3 right   =  vec3(View[0][0],View[1][0],View[2][0]);
  vec3 up      =  vec3(View[0][1],View[1][1],View[2][1]);
  vec3 forward = -vec3(View[0][2],View[1][2],View[2][2]);

  // 0.57735 is tan(60), the field of view
  vec3 screenDirection = normalize(
      vec3(0,0,1) +
      vec3(1,0,0) * pos.x * 0.57735 * aspectRatio +
      vec3(0,1,0) * pos.y * 0.57735);
  vec3 direction       = normalize(
      forward +
      right * pos.x * 0.57735 * aspectRatio +
      up    * pos.y * 0.57735);

  float z_b = textureLod(depthmap,pos.xy / 2 + 0.5, 0).r;
  gl_FragDepth = clamp(z_b,0.,0.9999999);

  float z_n = 2 * z_b - 1;
  float objectDepth = 2*projectionNear*projectionFar/(projectionFar+projectionNear-z_n*(projectionFar-projectionNear));
  objectDepth = sqrt(objectDepth*objectDepth + length(objectDepth*screenDirection.xy)*length(objectDepth*screenDirection.xy));
  vec3 objectColor = texture(colormap, pos/2+0.5).rgb*0.3;
  if (z_b ==1)
  {
    objectColor = vec3(0);
  }

  fragColor = vec4(objectColor,1);
  fragColor = vec4(primary_integration(vec3(CameraPosition), vec3(direction), objectDepth, objectColor), 1);
  fragNorm = vec4(0,1,0,0);
}
